{"ast":null,"code":"var _jsxFileName = \"/Users/zacharykerner/Desktop/Capstone/TakeHome/debugging-challenge/ui/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/table.jsx\";\nimport Page from './components/page.jsx';\nimport { Container, Button } from \"@material-ui/core\";\nimport formatCurrency from \"./utils/formatCurrency\";\nimport { getUsers } from \"./services/users.js\";\nimport { getApplications } from \"./services/applications.js\";\nimport { getPayments, createPayment } from \"./services/payments.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  /**\n   * Hydrate data for the table and set state for users, applications, and payments\n   */\n  const [users, setUsers] = useState([]);\n  const [applications, setApplications] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    async function fetchData() {\n      const [usersData, applicationsData, paymentsData] = await Promise.all([getUsers(), getApplications(), getPayments()]);\n      setUsers(usersData.body);\n      setApplications(applicationsData.body);\n      setPayments(paymentsData.body);\n      setDataLoaded(true);\n    }\n\n    fetchData();\n  }, []);\n\n  const handlePage = number => {\n    setPage(number);\n    console.log(number);\n  };\n\n  const initiatePayment = async ({\n    applicationUuid,\n    requestedAmount\n  }) => {\n    const {\n      body\n    } = await createPayment({\n      applicationUuid,\n      requestedAmount\n    });\n    setPayments([...payments, body]);\n  };\n\n  let tableData = [];\n\n  if (dataLoaded) {\n    const lowerLimit = (page - 1) * 10; //0 for \n\n    const upperLimit = page * 10 - 1;\n    tableData = users.slice(lowerLimit, upperLimit).map(({\n      uuid,\n      name,\n      email\n    }) => {\n      const {\n        requestedAmount,\n        uuid: applicationUuid\n      } = applications.find(application => application.userUuid === uuid) || {};\n      const {\n        paymentAmount,\n        paymentMethod\n      } = payments.find(payment => payment.applicationUuid === applicationUuid) || {}; // Format table data to be passed into the table component, pay button tacked\n      // onto the end to allow payments to be issued for each row\n\n      return {\n        uuid,\n        name,\n        email,\n        requestedAmount: formatCurrency(requestedAmount),\n        paymentAmount: formatCurrency(paymentAmount),\n        paymentMethod,\n        initiatePayment: requestedAmount ? /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => initiatePayment({\n            applicationUuid,\n            requestedAmount\n          }),\n          variant: \"contained\",\n          children: \"Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this) : null\n      };\n    });\n  } //the numRows parameter should be based on page\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: dataLoaded && /*#__PURE__*/_jsxDEV(Page, {\n        numRows: users,\n        handlePage: handlePage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: dataLoaded && /*#__PURE__*/_jsxDEV(Table, {\n        data: tableData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"/Pxowj//qPPPpy+PGAjqJJ8gtu0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/zacharykerner/Desktop/Capstone/TakeHome/debugging-challenge/ui/src/App.jsx"],"names":["React","useState","useEffect","Table","Page","Container","Button","formatCurrency","getUsers","getApplications","getPayments","createPayment","App","users","setUsers","applications","setApplications","payments","setPayments","dataLoaded","setDataLoaded","page","setPage","fetchData","usersData","applicationsData","paymentsData","Promise","all","body","handlePage","number","console","log","initiatePayment","applicationUuid","requestedAmount","tableData","lowerLimit","upperLimit","slice","map","uuid","name","email","find","application","userUuid","paymentAmount","paymentMethod","payment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/table.jsx\";\nimport Page from './components/page.jsx'\nimport { Container, Button } from \"@material-ui/core\";\nimport formatCurrency from \"./utils/formatCurrency\";\n\nimport { getUsers } from \"./services/users.js\";\nimport { getApplications } from \"./services/applications.js\";\nimport { getPayments, createPayment } from \"./services/payments.js\";\n\nconst App = () => {\n  /**\n   * Hydrate data for the table and set state for users, applications, and payments\n   */\n  const [users, setUsers] = useState([]);\n  const [applications, setApplications] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [page, setPage] = useState(1)\n  useEffect(() => {\n    async function fetchData() {\n      const [usersData, applicationsData, paymentsData] = await Promise.all([\n        getUsers(),\n        getApplications(),\n        getPayments(),\n      ]);\n\n      setUsers(usersData.body);\n      setApplications(applicationsData.body);\n      setPayments(paymentsData.body);\n      setDataLoaded(true);\n    }\n    fetchData();\n  }, []);\n\n  const handlePage = (number) => {\n    setPage(number)\n    console.log(number)\n  }\n\n  const initiatePayment = async ({ applicationUuid, requestedAmount }) => {\n    const { body } = await createPayment({\n      applicationUuid,\n      requestedAmount,\n    });\n    setPayments([...payments, body]);\n  };\n\n  let tableData = [];\n  if (dataLoaded) {\n    const lowerLimit = (page - 1) * 10 //0 for \n    const upperLimit = page * 10 - 1\n    tableData = users.slice(lowerLimit, upperLimit).map(({ uuid, name, email }) => {\n      const { requestedAmount, uuid: applicationUuid } =\n      applications.find((application) => application.userUuid === uuid) || {};\n      const { paymentAmount, paymentMethod } =\n      payments.find(\n        (payment) => payment.applicationUuid === applicationUuid\n      ) || {};\n\n      // Format table data to be passed into the table component, pay button tacked\n      // onto the end to allow payments to be issued for each row\n      return {\n        uuid,\n        name,\n        email,\n        requestedAmount: formatCurrency(requestedAmount),\n        paymentAmount: formatCurrency(paymentAmount),\n        paymentMethod,\n        initiatePayment: requestedAmount ? (\n          <Button\n            onClick={() =>\n              initiatePayment({\n                applicationUuid,\n                requestedAmount,\n              })\n            }\n            variant=\"contained\"\n          >\n            Pay\n          </Button>\n        ) : null,\n      };\n    });\n  }\n  //the numRows parameter should be based on page\n  return (\n    <div className=\"App\">\n      \n      <Container>{dataLoaded && <Page numRows={users} handlePage={handlePage}/>}</Container>\n      <Container>{dataLoaded &&  <Table data={tableData} />}</Container>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}